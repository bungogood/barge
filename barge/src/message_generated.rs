// automatically generated by the FlatBuffers compiler, do not modify

#![allow(warnings)]
// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod barge {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_EVENT: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_EVENT: u8 = 4;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_EVENT: [Event; 5] = [
        Event::NONE,
        Event::AppendEntriesReq,
        Event::AppendEntriesRes,
        Event::ElectionReq,
        Event::ElectionRes,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Event(pub u8);
    #[allow(non_upper_case_globals)]
    impl Event {
        pub const NONE: Self = Self(0);
        pub const AppendEntriesReq: Self = Self(1);
        pub const AppendEntriesRes: Self = Self(2);
        pub const ElectionReq: Self = Self(3);
        pub const ElectionRes: Self = Self(4);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 4;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::NONE,
            Self::AppendEntriesReq,
            Self::AppendEntriesRes,
            Self::ElectionReq,
            Self::ElectionRes,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::AppendEntriesReq => Some("AppendEntriesReq"),
                Self::AppendEntriesRes => Some("AppendEntriesRes"),
                Self::ElectionReq => Some("ElectionReq"),
                Self::ElectionRes => Some("ElectionRes"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for Event {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Event {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for Event {
        type Output = Event;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for Event {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Event {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Event {}
    pub struct EventUnionTableOffset {}

    // struct Uuid, aligned to 1
    #[repr(transparent)]
    #[derive(Clone, Copy, PartialEq)]
    pub struct Uuid(pub [u8; 16]);
    impl Default for Uuid {
        fn default() -> Self {
            Self([0; 16])
        }
    }
    impl core::fmt::Debug for Uuid {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            f.debug_struct("Uuid")
                .field("bytes", &self.bytes())
                .finish()
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Uuid {}
    impl<'a> flatbuffers::Follow<'a> for Uuid {
        type Inner = &'a Uuid;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            <&'a Uuid>::follow(buf, loc)
        }
    }
    impl<'a> flatbuffers::Follow<'a> for &'a Uuid {
        type Inner = &'a Uuid;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            flatbuffers::follow_cast_ref::<Uuid>(buf, loc)
        }
    }
    impl<'b> flatbuffers::Push for Uuid {
        type Output = Uuid;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            let src = ::core::slice::from_raw_parts(
                self as *const Uuid as *const u8,
                <Self as flatbuffers::Push>::size(),
            );
            dst.copy_from_slice(src);
        }
        #[inline]
        fn alignment() -> flatbuffers::PushAlignment {
            flatbuffers::PushAlignment::new(1)
        }
    }

    impl<'a> flatbuffers::Verifiable for Uuid {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.in_buffer::<Self>(pos)
        }
    }

    impl<'a> Uuid {
        #[allow(clippy::too_many_arguments)]
        pub fn new(bytes: &[u8; 16]) -> Self {
            let mut s = Self([0; 16]);
            s.set_bytes(bytes);
            s
        }

        pub fn bytes(&'a self) -> flatbuffers::Array<'a, u8, 16> {
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid array in this slot
            unsafe { flatbuffers::Array::follow(&self.0, 0) }
        }

        pub fn set_bytes(&mut self, items: &[u8; 16]) {
            // Safety:
            // Created from a valid Table for this object
            // Which contains a valid array in this slot
            unsafe { flatbuffers::emplace_scalar_array(&mut self.0, 0, items) };
        }
    }

    pub enum LogEntryOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct LogEntry<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for LogEntry<'a> {
        type Inner = LogEntry<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> LogEntry<'a> {
        pub const VT_INDEX: flatbuffers::VOffsetT = 4;
        pub const VT_TERM: flatbuffers::VOffsetT = 6;
        pub const VT_DATA: flatbuffers::VOffsetT = 8;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            LogEntry { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args LogEntryArgs<'args>,
        ) -> flatbuffers::WIPOffset<LogEntry<'bldr>> {
            let mut builder = LogEntryBuilder::new(_fbb);
            builder.add_term(args.term);
            builder.add_index(args.index);
            if let Some(x) = args.data {
                builder.add_data(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn index(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u64>(LogEntry::VT_INDEX, Some(0)).unwrap() }
        }
        #[inline]
        pub fn term(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u64>(LogEntry::VT_TERM, Some(0)).unwrap() }
        }
        #[inline]
        pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        LogEntry::VT_DATA,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for LogEntry<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("index", Self::VT_INDEX, false)?
                .visit_field::<u64>("term", Self::VT_TERM, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "data",
                    Self::VT_DATA,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct LogEntryArgs<'a> {
        pub index: u64,
        pub term: u64,
        pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for LogEntryArgs<'a> {
        #[inline]
        fn default() -> Self {
            LogEntryArgs {
                index: 0,
                term: 0,
                data: None,
            }
        }
    }

    pub struct LogEntryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogEntryBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_index(&mut self, index: u64) {
            self.fbb_.push_slot::<u64>(LogEntry::VT_INDEX, index, 0);
        }
        #[inline]
        pub fn add_term(&mut self, term: u64) {
            self.fbb_.push_slot::<u64>(LogEntry::VT_TERM, term, 0);
        }
        #[inline]
        pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(LogEntry::VT_DATA, data);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> LogEntryBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            LogEntryBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<LogEntry<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for LogEntry<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("LogEntry");
            ds.field("index", &self.index());
            ds.field("term", &self.term());
            ds.field("data", &self.data());
            ds.finish()
        }
    }
    pub enum AppendEntriesReqOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct AppendEntriesReq<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for AppendEntriesReq<'a> {
        type Inner = AppendEntriesReq<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> AppendEntriesReq<'a> {
        pub const VT_TERM: flatbuffers::VOffsetT = 4;
        pub const VT_COMMIT_INDEX: flatbuffers::VOffsetT = 6;
        pub const VT_PREV_INDEX: flatbuffers::VOffsetT = 8;
        pub const VT_PREV_TERM: flatbuffers::VOffsetT = 10;
        pub const VT_ENTRIES: flatbuffers::VOffsetT = 12;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            AppendEntriesReq { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args AppendEntriesReqArgs<'args>,
        ) -> flatbuffers::WIPOffset<AppendEntriesReq<'bldr>> {
            let mut builder = AppendEntriesReqBuilder::new(_fbb);
            builder.add_prev_term(args.prev_term);
            builder.add_prev_index(args.prev_index);
            builder.add_commit_index(args.commit_index);
            builder.add_term(args.term);
            if let Some(x) = args.entries {
                builder.add_entries(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn term(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AppendEntriesReq::VT_TERM, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn commit_index(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AppendEntriesReq::VT_COMMIT_INDEX, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn prev_index(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AppendEntriesReq::VT_PREV_INDEX, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn prev_term(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AppendEntriesReq::VT_PREV_TERM, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn entries(
            &self,
        ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LogEntry<'a>>>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab.get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LogEntry>>,
                >>(AppendEntriesReq::VT_ENTRIES, None)
            }
        }
    }

    impl flatbuffers::Verifiable for AppendEntriesReq<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("term", Self::VT_TERM, false)?
                .visit_field::<u64>("commit_index", Self::VT_COMMIT_INDEX, false)?
                .visit_field::<u64>("prev_index", Self::VT_PREV_INDEX, false)?
                .visit_field::<u64>("prev_term", Self::VT_PREV_TERM, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<LogEntry>>,
                >>("entries", Self::VT_ENTRIES, false)?
                .finish();
            Ok(())
        }
    }
    pub struct AppendEntriesReqArgs<'a> {
        pub term: u64,
        pub commit_index: u64,
        pub prev_index: u64,
        pub prev_term: u64,
        pub entries: Option<
            flatbuffers::WIPOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<LogEntry<'a>>>,
            >,
        >,
    }
    impl<'a> Default for AppendEntriesReqArgs<'a> {
        #[inline]
        fn default() -> Self {
            AppendEntriesReqArgs {
                term: 0,
                commit_index: 0,
                prev_index: 0,
                prev_term: 0,
                entries: None,
            }
        }
    }

    pub struct AppendEntriesReqBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AppendEntriesReqBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_term(&mut self, term: u64) {
            self.fbb_
                .push_slot::<u64>(AppendEntriesReq::VT_TERM, term, 0);
        }
        #[inline]
        pub fn add_commit_index(&mut self, commit_index: u64) {
            self.fbb_
                .push_slot::<u64>(AppendEntriesReq::VT_COMMIT_INDEX, commit_index, 0);
        }
        #[inline]
        pub fn add_prev_index(&mut self, prev_index: u64) {
            self.fbb_
                .push_slot::<u64>(AppendEntriesReq::VT_PREV_INDEX, prev_index, 0);
        }
        #[inline]
        pub fn add_prev_term(&mut self, prev_term: u64) {
            self.fbb_
                .push_slot::<u64>(AppendEntriesReq::VT_PREV_TERM, prev_term, 0);
        }
        #[inline]
        pub fn add_entries(
            &mut self,
            entries: flatbuffers::WIPOffset<
                flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<LogEntry<'b>>>,
            >,
        ) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                AppendEntriesReq::VT_ENTRIES,
                entries,
            );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> AppendEntriesReqBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            AppendEntriesReqBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<AppendEntriesReq<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for AppendEntriesReq<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("AppendEntriesReq");
            ds.field("term", &self.term());
            ds.field("commit_index", &self.commit_index());
            ds.field("prev_index", &self.prev_index());
            ds.field("prev_term", &self.prev_term());
            ds.field("entries", &self.entries());
            ds.finish()
        }
    }
    pub enum AppendEntriesResOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct AppendEntriesRes<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for AppendEntriesRes<'a> {
        type Inner = AppendEntriesRes<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> AppendEntriesRes<'a> {
        pub const VT_TERM: flatbuffers::VOffsetT = 4;
        pub const VT_APPEND_INDEX: flatbuffers::VOffsetT = 6;
        pub const VT_COMMIT_INDEX: flatbuffers::VOffsetT = 8;
        pub const VT_SUCCESS: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            AppendEntriesRes { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args AppendEntriesResArgs,
        ) -> flatbuffers::WIPOffset<AppendEntriesRes<'bldr>> {
            let mut builder = AppendEntriesResBuilder::new(_fbb);
            builder.add_commit_index(args.commit_index);
            builder.add_append_index(args.append_index);
            builder.add_term(args.term);
            builder.add_success(args.success);
            builder.finish()
        }

        #[inline]
        pub fn term(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AppendEntriesRes::VT_TERM, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn append_index(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AppendEntriesRes::VT_APPEND_INDEX, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn commit_index(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AppendEntriesRes::VT_COMMIT_INDEX, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn success(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<bool>(AppendEntriesRes::VT_SUCCESS, Some(false))
                    .unwrap()
            }
        }
    }

    impl flatbuffers::Verifiable for AppendEntriesRes<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("term", Self::VT_TERM, false)?
                .visit_field::<u64>("append_index", Self::VT_APPEND_INDEX, false)?
                .visit_field::<u64>("commit_index", Self::VT_COMMIT_INDEX, false)?
                .visit_field::<bool>("success", Self::VT_SUCCESS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct AppendEntriesResArgs {
        pub term: u64,
        pub append_index: u64,
        pub commit_index: u64,
        pub success: bool,
    }
    impl<'a> Default for AppendEntriesResArgs {
        #[inline]
        fn default() -> Self {
            AppendEntriesResArgs {
                term: 0,
                append_index: 0,
                commit_index: 0,
                success: false,
            }
        }
    }

    pub struct AppendEntriesResBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AppendEntriesResBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_term(&mut self, term: u64) {
            self.fbb_
                .push_slot::<u64>(AppendEntriesRes::VT_TERM, term, 0);
        }
        #[inline]
        pub fn add_append_index(&mut self, append_index: u64) {
            self.fbb_
                .push_slot::<u64>(AppendEntriesRes::VT_APPEND_INDEX, append_index, 0);
        }
        #[inline]
        pub fn add_commit_index(&mut self, commit_index: u64) {
            self.fbb_
                .push_slot::<u64>(AppendEntriesRes::VT_COMMIT_INDEX, commit_index, 0);
        }
        #[inline]
        pub fn add_success(&mut self, success: bool) {
            self.fbb_
                .push_slot::<bool>(AppendEntriesRes::VT_SUCCESS, success, false);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> AppendEntriesResBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            AppendEntriesResBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<AppendEntriesRes<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for AppendEntriesRes<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("AppendEntriesRes");
            ds.field("term", &self.term());
            ds.field("append_index", &self.append_index());
            ds.field("commit_index", &self.commit_index());
            ds.field("success", &self.success());
            ds.finish()
        }
    }
    pub enum ElectionReqOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ElectionReq<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ElectionReq<'a> {
        type Inner = ElectionReq<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> ElectionReq<'a> {
        pub const VT_TERM: flatbuffers::VOffsetT = 4;
        pub const VT_CANDIDATE_ID: flatbuffers::VOffsetT = 6;
        pub const VT_PREV_INDEX: flatbuffers::VOffsetT = 8;
        pub const VT_PREV_TERM: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ElectionReq { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args ElectionReqArgs,
        ) -> flatbuffers::WIPOffset<ElectionReq<'bldr>> {
            let mut builder = ElectionReqBuilder::new(_fbb);
            builder.add_prev_term(args.prev_term);
            builder.add_prev_index(args.prev_index);
            builder.add_candidate_id(args.candidate_id);
            builder.add_term(args.term);
            builder.finish()
        }

        #[inline]
        pub fn term(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u64>(ElectionReq::VT_TERM, Some(0)).unwrap() }
        }
        #[inline]
        pub fn candidate_id(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(ElectionReq::VT_CANDIDATE_ID, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn prev_index(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(ElectionReq::VT_PREV_INDEX, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn prev_term(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(ElectionReq::VT_PREV_TERM, Some(0))
                    .unwrap()
            }
        }
    }

    impl flatbuffers::Verifiable for ElectionReq<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("term", Self::VT_TERM, false)?
                .visit_field::<u64>("candidate_id", Self::VT_CANDIDATE_ID, false)?
                .visit_field::<u64>("prev_index", Self::VT_PREV_INDEX, false)?
                .visit_field::<u64>("prev_term", Self::VT_PREV_TERM, false)?
                .finish();
            Ok(())
        }
    }
    pub struct ElectionReqArgs {
        pub term: u64,
        pub candidate_id: u64,
        pub prev_index: u64,
        pub prev_term: u64,
    }
    impl<'a> Default for ElectionReqArgs {
        #[inline]
        fn default() -> Self {
            ElectionReqArgs {
                term: 0,
                candidate_id: 0,
                prev_index: 0,
                prev_term: 0,
            }
        }
    }

    pub struct ElectionReqBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ElectionReqBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_term(&mut self, term: u64) {
            self.fbb_.push_slot::<u64>(ElectionReq::VT_TERM, term, 0);
        }
        #[inline]
        pub fn add_candidate_id(&mut self, candidate_id: u64) {
            self.fbb_
                .push_slot::<u64>(ElectionReq::VT_CANDIDATE_ID, candidate_id, 0);
        }
        #[inline]
        pub fn add_prev_index(&mut self, prev_index: u64) {
            self.fbb_
                .push_slot::<u64>(ElectionReq::VT_PREV_INDEX, prev_index, 0);
        }
        #[inline]
        pub fn add_prev_term(&mut self, prev_term: u64) {
            self.fbb_
                .push_slot::<u64>(ElectionReq::VT_PREV_TERM, prev_term, 0);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> ElectionReqBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            ElectionReqBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ElectionReq<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ElectionReq<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ElectionReq");
            ds.field("term", &self.term());
            ds.field("candidate_id", &self.candidate_id());
            ds.field("prev_index", &self.prev_index());
            ds.field("prev_term", &self.prev_term());
            ds.finish()
        }
    }
    pub enum ElectionResOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct ElectionRes<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for ElectionRes<'a> {
        type Inner = ElectionRes<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> ElectionRes<'a> {
        pub const VT_TERM: flatbuffers::VOffsetT = 4;
        pub const VT_VOTE_GRANTED: flatbuffers::VOffsetT = 6;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            ElectionRes { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args ElectionResArgs,
        ) -> flatbuffers::WIPOffset<ElectionRes<'bldr>> {
            let mut builder = ElectionResBuilder::new(_fbb);
            builder.add_term(args.term);
            builder.add_vote_granted(args.vote_granted);
            builder.finish()
        }

        #[inline]
        pub fn term(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u64>(ElectionRes::VT_TERM, Some(0)).unwrap() }
        }
        #[inline]
        pub fn vote_granted(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<bool>(ElectionRes::VT_VOTE_GRANTED, Some(false))
                    .unwrap()
            }
        }
    }

    impl flatbuffers::Verifiable for ElectionRes<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("term", Self::VT_TERM, false)?
                .visit_field::<bool>("vote_granted", Self::VT_VOTE_GRANTED, false)?
                .finish();
            Ok(())
        }
    }
    pub struct ElectionResArgs {
        pub term: u64,
        pub vote_granted: bool,
    }
    impl<'a> Default for ElectionResArgs {
        #[inline]
        fn default() -> Self {
            ElectionResArgs {
                term: 0,
                vote_granted: false,
            }
        }
    }

    pub struct ElectionResBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ElectionResBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_term(&mut self, term: u64) {
            self.fbb_.push_slot::<u64>(ElectionRes::VT_TERM, term, 0);
        }
        #[inline]
        pub fn add_vote_granted(&mut self, vote_granted: bool) {
            self.fbb_
                .push_slot::<bool>(ElectionRes::VT_VOTE_GRANTED, vote_granted, false);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> ElectionResBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            ElectionResBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<ElectionRes<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for ElectionRes<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("ElectionRes");
            ds.field("term", &self.term());
            ds.field("vote_granted", &self.vote_granted());
            ds.finish()
        }
    }
    pub enum MessageOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Message<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Message<'a> {
        type Inner = Message<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Message<'a> {
        pub const VT_SENDER: flatbuffers::VOffsetT = 4;
        pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 6;
        pub const VT_EVENT_TYPE: flatbuffers::VOffsetT = 8;
        pub const VT_EVENT: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Message { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args MessageArgs,
        ) -> flatbuffers::WIPOffset<Message<'bldr>> {
            let mut builder = MessageBuilder::new(_fbb);
            builder.add_timestamp(args.timestamp);
            builder.add_sender(args.sender);
            if let Some(x) = args.event {
                builder.add_event(x);
            }
            builder.add_event_type(args.event_type);
            builder.finish()
        }

        #[inline]
        pub fn sender(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u64>(Message::VT_SENDER, Some(0)).unwrap() }
        }
        #[inline]
        pub fn timestamp(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i64>(Message::VT_TIMESTAMP, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn event_type(&self) -> Event {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<Event>(Message::VT_EVENT_TYPE, Some(Event::NONE))
                    .unwrap()
            }
        }
        #[inline]
        pub fn event(&self) -> Option<flatbuffers::Table<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(
                        Message::VT_EVENT,
                        None,
                    )
            }
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn event_as_append_entries_req(&self) -> Option<AppendEntriesReq<'a>> {
            if self.event_type() == Event::AppendEntriesReq {
                self.event().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { AppendEntriesReq::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn event_as_append_entries_res(&self) -> Option<AppendEntriesRes<'a>> {
            if self.event_type() == Event::AppendEntriesRes {
                self.event().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { AppendEntriesRes::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn event_as_election_req(&self) -> Option<ElectionReq<'a>> {
            if self.event_type() == Event::ElectionReq {
                self.event().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { ElectionReq::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn event_as_election_res(&self) -> Option<ElectionRes<'a>> {
            if self.event_type() == Event::ElectionRes {
                self.event().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { ElectionRes::init_from_table(t) }
                })
            } else {
                None
            }
        }
    }

    impl flatbuffers::Verifiable for Message<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("sender", Self::VT_SENDER, false)?
                .visit_field::<i64>("timestamp", Self::VT_TIMESTAMP, false)?
                .visit_union::<Event, _>(
                    "event_type",
                    Self::VT_EVENT_TYPE,
                    "event",
                    Self::VT_EVENT,
                    false,
                    |key, v, pos| match key {
                        Event::AppendEntriesReq => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<AppendEntriesReq>>(
                                "Event::AppendEntriesReq",
                                pos,
                            ),
                        Event::AppendEntriesRes => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<AppendEntriesRes>>(
                                "Event::AppendEntriesRes",
                                pos,
                            ),
                        Event::ElectionReq => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<ElectionReq>>(
                                "Event::ElectionReq",
                                pos,
                            ),
                        Event::ElectionRes => v
                            .verify_union_variant::<flatbuffers::ForwardsUOffset<ElectionRes>>(
                                "Event::ElectionRes",
                                pos,
                            ),
                        _ => Ok(()),
                    },
                )?
                .finish();
            Ok(())
        }
    }
    pub struct MessageArgs {
        pub sender: u64,
        pub timestamp: i64,
        pub event_type: Event,
        pub event: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for MessageArgs {
        #[inline]
        fn default() -> Self {
            MessageArgs {
                sender: 0,
                timestamp: 0,
                event_type: Event::NONE,
                event: None,
            }
        }
    }

    pub struct MessageBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MessageBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_sender(&mut self, sender: u64) {
            self.fbb_.push_slot::<u64>(Message::VT_SENDER, sender, 0);
        }
        #[inline]
        pub fn add_timestamp(&mut self, timestamp: i64) {
            self.fbb_
                .push_slot::<i64>(Message::VT_TIMESTAMP, timestamp, 0);
        }
        #[inline]
        pub fn add_event_type(&mut self, event_type: Event) {
            self.fbb_
                .push_slot::<Event>(Message::VT_EVENT_TYPE, event_type, Event::NONE);
        }
        #[inline]
        pub fn add_event(&mut self, event: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Message::VT_EVENT, event);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> MessageBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            MessageBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Message<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Message<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Message");
            ds.field("sender", &self.sender());
            ds.field("timestamp", &self.timestamp());
            ds.field("event_type", &self.event_type());
            match self.event_type() {
                Event::AppendEntriesReq => {
                    if let Some(x) = self.event_as_append_entries_req() {
                        ds.field("event", &x)
                    } else {
                        ds.field(
                            "event",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                Event::AppendEntriesRes => {
                    if let Some(x) = self.event_as_append_entries_res() {
                        ds.field("event", &x)
                    } else {
                        ds.field(
                            "event",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                Event::ElectionReq => {
                    if let Some(x) = self.event_as_election_req() {
                        ds.field("event", &x)
                    } else {
                        ds.field(
                            "event",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                Event::ElectionRes => {
                    if let Some(x) = self.event_as_election_res() {
                        ds.field("event", &x)
                    } else {
                        ds.field(
                            "event",
                            &"InvalidFlatbuffer: Union discriminant does not match value.",
                        )
                    }
                }
                _ => {
                    let x: Option<()> = None;
                    ds.field("event", &x)
                }
            };
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Message`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_message_unchecked`.
    pub fn root_as_message(buf: &[u8]) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Message>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Message` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_message_unchecked`.
    pub fn size_prefixed_root_as_message(
        buf: &[u8],
    ) -> Result<Message, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Message>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Message` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_message_unchecked`.
    pub fn root_as_message_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Message<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Message` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_message_unchecked`.
    pub fn size_prefixed_root_as_message_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Message<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Message<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Message and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Message`.
    pub unsafe fn root_as_message_unchecked(buf: &[u8]) -> Message {
        flatbuffers::root_unchecked::<Message>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Message and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Message`.
    pub unsafe fn size_prefixed_root_as_message_unchecked(buf: &[u8]) -> Message {
        flatbuffers::size_prefixed_root_unchecked::<Message>(buf)
    }
    #[inline]
    pub fn finish_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Message<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_message_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Message<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod Barge
