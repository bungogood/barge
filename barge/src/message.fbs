namespace Barge;

struct Metadata {
    id: uint16;
    voted_for: uint16; // 0xFFFF is None
    term: uint64;
    commit_index: uint64;
    append_index: uint64;
}

struct IndexEntry {
    index: uint64;
    term: uint64;
    offset: uint64;
    size: uint32;
    sender: uint32;
}

struct NodeDetails {
    id:uint16;
    ip:uint32;
    port:uint16;
}

union Event {
    AppendEntriesReq,
    AppendEntriesRes,
    ElectionReq,
    ElectionRes,
    JoinReq,
    JoinRes
}

table JoinReq {
    prev_index: uint64;
    prev_term: uint64;
    node: NodeDetails (required);
}

table JoinRes {
    success: bool;
    leader: NodeDetails (required);
    message: string;
}

table ControlEntry {
    new_members: [NodeDetails];
    removed_members: [uint32];
}

// Meta data about each entry in AppendEntriesReq
struct LogEntry {
    index: uint64;
    term: uint64;
    control: bool;
    offset: uint32;
    size: uint32;
}

table AppendEntriesReq {
    term: uint64;
    commit_index: uint64;
    prev_index: uint64;
    prev_term: uint64;
    entries: [LogEntry];
    data: [ubyte];
}

table AppendEntriesRes {
    term: uint64;
    append_index: uint64;
    commit_index: uint64;
    success: bool;
}

table ElectionReq {
    term: uint64;
    candidate_id: uint16;
    prev_index: uint64;
    prev_term: uint64;
}

table ElectionRes {
    term: uint64;
    vote_granted: bool;
}

table Message {
    sender: uint16;
    timestamp: int64;
    event: Event (required);
}

root_type Message;
