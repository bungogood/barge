namespace Barge;

enum Role: uint16 {
    Follower,
    Leader,
    Candidate,
    Learner,
    Pending,
}

struct Metadata {
    promoted: bool;
    voted_for: uint16; // 0xFFFF is None
    term: uint64;
    commit_index: uint64;
    append_index: uint64;
}

struct IndexEntry {
    index: uint64;
    term: uint64;
    sender: uint16;
    control: bool;
    offset: uint64;
    size: uint32;
}

struct NodeDetails {
    id: uint16;
    ip: uint32;
    port: uint16;
    promoted: bool;
}

union Event {
    AppendEntriesReq,
    AppendEntriesRes,
    ElectionReq,
    ElectionRes,
    JoinReq,
    JoinRes
}

table JoinReq {
    prev_index: uint64;
    prev_term: uint64;
    node: NodeDetails (required);
}

table JoinAck {
    pending: bool; // False if not the leader
    leader: NodeDetails;
}

table JoinRes {
    id: uint16;
}

table AddNode {
    node: NodeDetails (required);
}

table PromoteNode {
    id: uint16;
}

table RemoveNode {
    id: uint16;
}

union ControlMessage {
    AddNode,
    PromoteNode,
    RemoveNode
}

table ControlEntry {
    control: ControlMessage (required);
}

table AppendEntriesReq {
    term: uint64;
    commit_index: uint64;
    prev_index: uint64;
    prev_term: uint64;
    entries: [IndexEntry] (required);
    data: [ubyte] (required);
}

table AppendEntriesRes {
    term: uint64;
    append_index: uint64;
    commit_index: uint64;
    success: bool;
}

table ElectionReq {
    term: uint64;
    candidate_id: uint16;
    prev_index: uint64;
    prev_term: uint64;
}

table ElectionRes {
    term: uint64;
    vote_granted: bool;
}

table Message {
    sender: uint16;
    timestamp: int64;
    event: Event (required);
}

root_type Message;
